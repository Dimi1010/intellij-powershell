Index: src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/ide/inspection/EditorServicesInspection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/ide/inspection/EditorServicesInspection.kt	(date 1517239702000)
+++ src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/ide/inspection/EditorServicesInspection.kt	(date 1517239702000)
@@ -0,0 +1,90 @@
+package com.intellij.plugin.powershell.lang.lsp.ide.inspection
+
+import com.intellij.codeInspection.InspectionManager
+import com.intellij.codeInspection.LocalInspectionTool
+import com.intellij.codeInspection.ProblemDescriptor
+import com.intellij.codeInspection.ProblemHighlightType
+import com.intellij.openapi.application.ApplicationManager
+import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.editor.colors.CodeInsightColors
+import com.intellij.openapi.editor.markup.HighlighterLayer
+import com.intellij.openapi.editor.markup.HighlighterTargetArea
+import com.intellij.openapi.editor.markup.RangeHighlighter
+import com.intellij.openapi.util.TextRange
+import com.intellij.plugin.powershell.lang.lsp.ide.EditorEventManager
+import com.intellij.plugin.powershell.lang.lsp.psi.LSPInspectionPsiElementImpl
+import com.intellij.plugin.powershell.lang.lsp.util.DocumentUtils.lspPosToOffset
+import com.intellij.plugin.powershell.lang.lsp.util.DocumentUtils.rToString
+import com.intellij.plugin.powershell.lang.lsp.util.getTextEditor
+import com.intellij.psi.PsiFile
+import org.eclipse.lsp4j.Diagnostic
+
+class EditorServicesInspection : LocalInspectionTool() {
+  private val LOG: Logger = Logger.getInstance(javaClass)
+
+  private val highligters: MutableList<RangeHighlighter> = mutableListOf()
+
+  override fun checkFile(file: PsiFile, manager: InspectionManager, isOnTheFly: Boolean): Array<ProblemDescriptor>? {
+    val vFile = file.virtualFile ?: return null
+    val editor = getTextEditor(vFile, manager.project) ?: return null
+    val eventManager = EditorEventManager.forEditor(editor) ?: return null
+    val diag: List<Diagnostic> = eventManager.getDiagnostics()
+    val result = mutableListOf<ProblemDescriptor>()
+    val markupModel = editor.markupModel
+    val oldHighlighters = highligters.toList()
+    ApplicationManager.getApplication().invokeLater {
+//      markupModel.removeAllHighlighters()
+//      oldHighlighters.forEach { markupModel.removeHighlighter(it) }
+    }
+      highligters.clear()
+      for (d in diag) {
+        val range = d.range
+        try {
+          val message = d.message
+          val hType: ProblemHighlightType = ProblemHighlightType.INFORMATION
+//        val hType: ProblemHighlightType = when {
+//          d.severity == DiagnosticSeverity.Error -> ProblemHighlightType.GENERIC_ERROR_OR_WARNING
+//          d.severity == DiagnosticSeverity.Warning -> ProblemHighlightType.GENERIC_ERROR_OR_WARNING
+//          d.severity == DiagnosticSeverity.Hint -> ProblemHighlightType.INFORMATION
+//          else -> ProblemHighlightType.INFORMATION
+//        }
+          var rangeStart = lspPosToOffset(editor, range.start)
+          var rangeEnd = lspPosToOffset(editor, range.end)
+          if (rangeStart == rangeEnd) {
+            if (rangeStart > 0) rangeStart -= 1 else if (rangeEnd < file.text.length) rangeEnd += 1
+          }
+          val element = if (rangeStart < rangeEnd) {
+//          file.findElementAt(lspPosToOffset(editor, range.start) + 1) ?:
+            LSPInspectionPsiElementImpl(file, TextRange.create(rangeStart, rangeEnd))
+          } else {
+            file
+          }
+          val desc = manager.createProblemDescriptor(element, message, isOnTheFly, null, hType)
+          result.add(desc)
+          ApplicationManager.getApplication().invokeLater {
+            val h =
+                markupModel.addRangeHighlighter(rangeStart, rangeEnd,
+                    HighlighterLayer.ERROR,
+                    CodeInsightColors.ERRORS_ATTRIBUTES.defaultAttributes,
+                    HighlighterTargetArea.EXACT_RANGE)
+          highligters.add(h)
+//          h.
+          }
+        } catch (e: StringIndexOutOfBoundsException) {
+          LOG.warn("String out of bounds for server range ${rToString(range)}: ${e.message}")
+        } catch (e: IndexOutOfBoundsException) {
+          LOG.warn("Index out of bounds for server range ${rToString(range)}: ${e.message}")
+        }
+//      }
+      return result.toTypedArray()
+    }
+//    //reset diagnostics info because it will be incorrectly shown: the highlighting pass
+//    // is executed right after char typed in editor with the outdated diagnostics (i.e. offsets)
+    eventManager.setDiagnostics(listOf()) //todo do not reset without real need. Cases like: offset of the diagnostic problem did not changed...
+    return result.toTypedArray()
+  }
+
+  override fun getStaticDescription(): String {
+    return "Reports problems found by PowerShell language server"
+  }
+}
\ No newline at end of file
Index: src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/psi/LSPInspectionPsiElement.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/psi/LSPInspectionPsiElement.kt	(date 1517212984000)
+++ src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/psi/LSPInspectionPsiElement.kt	(date 1517212984000)
@@ -0,0 +1,6 @@
+package com.intellij.plugin.powershell.lang.lsp.psi
+
+import com.intellij.plugin.powershell.psi.PowerShellPsiElement
+
+interface LSPInspectionPsiElement: PowerShellPsiElement {
+}
\ No newline at end of file
Index: src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/psi/LSPInspectionPsiElementImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/psi/LSPInspectionPsiElementImpl.kt	(date 1517214941000)
+++ src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/psi/LSPInspectionPsiElementImpl.kt	(date 1517214941000)
@@ -0,0 +1,41 @@
+package com.intellij.plugin.powershell.lang.lsp.psi
+
+import com.intellij.lang.Language
+import com.intellij.navigation.ItemPresentation
+import com.intellij.openapi.util.TextRange
+import com.intellij.plugin.powershell.lang.PowerShellLanguage
+import com.intellij.psi.PsiElement
+import com.intellij.psi.PsiFile
+import com.intellij.psi.impl.FakePsiElement
+
+class LSPInspectionPsiElementImpl(private val myContainingFile: PsiFile, private val myRange: TextRange) : FakePsiElement(), LSPInspectionPsiElement {
+
+  constructor(parent: PsiFile, range: TextRange, name: String) : this(parent, range) {
+    myName = name
+  }
+
+  override fun getContainingFile(): PsiFile {
+    return myContainingFile
+  }
+  override fun getLanguage(): Language= PowerShellLanguage.INSTANCE
+
+  override fun getTextRange(): TextRange? =  myRange
+
+  override fun isPhysical(): Boolean = true
+
+  private var myName: String? = null
+
+  override fun toString(): String {
+    return "Inspection LSP element. Text: $text; File: ${myContainingFile.name}"
+  }
+
+  override fun getPresentation(): ItemPresentation {
+    return this
+  }
+
+  override fun getName(): String? {
+    return myName ?: super.getName()
+  }
+
+  override fun getParent(): PsiElement = myContainingFile
+}
\ No newline at end of file
Index: src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/client/PSLanguageClientImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/client/PSLanguageClientImpl.kt	(date 1517311721000)
+++ src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/client/PSLanguageClientImpl.kt	(date 1517311623000)
@@ -4,13 +4,19 @@
 package com.intellij.plugin.powershell.lang.lsp.client
 
 import com.intellij.openapi.diagnostic.Logger
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.VfsUtil
+import com.intellij.plugin.powershell.lang.lsp.ide.EditorEventManager
 import com.intellij.plugin.powershell.lang.lsp.languagehost.LanguageServerEndpoint
+import com.intellij.plugin.powershell.lang.lsp.util.getTextEditor
 import org.eclipse.lsp4j.*
 import org.eclipse.lsp4j.services.LanguageClient
 import org.eclipse.lsp4j.services.LanguageServer
+import java.io.File
+import java.net.URI
 import java.util.concurrent.CompletableFuture
 
-class PSLanguageClientImpl : LanguageClient {
+class PSLanguageClientImpl(val project: Project) : LanguageClient {
   private val LOG: Logger = Logger.getInstance(javaClass)
   private var server: LanguageServer? = null
   private var serverEndpoint: LanguageServerEndpoint? = null
@@ -58,6 +64,15 @@
    * signal results of validation runs.
    */
   override fun publishDiagnostics(diagnostics: PublishDiagnosticsParams) {
+    val uri = diagnostics.uri
+    cacheDiagnostics(uri, diagnostics.diagnostics)
+  }
+
+  private fun cacheDiagnostics(uri: String, diagnostics: List<Diagnostic>) {
+    val file = VfsUtil.findFileByIoFile(File(URI(uri)), false) ?: return
+    val editor = getTextEditor(file, project) ?: return
+    val manager = EditorEventManager.forEditor(editor) ?: return
+    manager.updateDiagnostics(diagnostics)
   }
 
   /**
Index: src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/ide/EditorEventManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/ide/EditorEventManager.kt	(date 1517311721000)
+++ src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/ide/EditorEventManager.kt	(date 1517217110000)
@@ -3,6 +3,8 @@
  */
 package com.intellij.plugin.powershell.lang.lsp.ide
 
+import com.intellij.codeInsight.daemon.DaemonCodeAnalyzer
+import com.intellij.openapi.application.ApplicationManager
 import com.intellij.openapi.diagnostic.Logger
 import com.intellij.openapi.editor.Editor
 import com.intellij.openapi.editor.event.DocumentEvent
@@ -18,6 +20,7 @@
 import com.intellij.plugin.powershell.lang.lsp.util.DocumentUtils.offsetToLSPPos
 import com.intellij.plugin.powershell.lang.lsp.util.editorToURI
 import com.intellij.plugin.powershell.lang.lsp.util.editorToURIString
+import com.intellij.psi.PsiDocumentManager
 import com.intellij.psi.PsiFile
 import org.eclipse.lsp4j.*
 import java.net.URI
@@ -42,6 +45,8 @@
     serverOptions.signatureHelpProvider.triggerCharacters.toSet()
   else emptySet<String>()
 
+  private var diagnosticsInfo: List<Diagnostic> = listOf()
+
   init {
     changesParams.textDocument.uri = identifier.uri
     editorToManager[editor] = this
@@ -170,4 +175,25 @@
 //      onTypeFormatting(c.toString)
 //    }
   }
+
+  fun updateDiagnostics(diagnostics: List<Diagnostic>) {
+    setDiagnostics(diagnostics)
+    if (ApplicationManager.getApplication().isDispatchThread) {
+      val psiFile = PsiDocumentManager.getInstance(project).getPsiFile(editor.document) ?: return
+      DaemonCodeAnalyzer.getInstance(project).restart(psiFile)
+//      diagnosticsInfo = listOf() //reset diagnostics info because it will be incorrectly shown: the highlighting pass
+      // is executed right after char typed in editor with the outdated diagnostics (i.e. offsets)
+    } else {
+      ApplicationManager.getApplication().runReadAction {
+        val psiFile = PsiDocumentManager.getInstance(project).getPsiFile(editor.document) ?: return@runReadAction
+        DaemonCodeAnalyzer.getInstance(project).restart(psiFile)
+      }
+    }
+  }
+
+  fun setDiagnostics(diagnostics: List<Diagnostic>) {
+    diagnosticsInfo = diagnostics
+  }
+
+  fun getDiagnostics(): List<Diagnostic> = diagnosticsInfo
 }
\ No newline at end of file
Index: src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/languagehost/LanguageServerEndpoint.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/languagehost/LanguageServerEndpoint.kt	(date 1517311721000)
+++ src/main/kotlin/com/intellij/plugin/powershell/lang/lsp/languagehost/LanguageServerEndpoint.kt	(date 1517311824000)
@@ -40,7 +40,7 @@
 
 class LanguageServerEndpoint(val project: Project) {
   private val LOG: Logger = Logger.getInstance(javaClass)
-  private var client: PSLanguageClientImpl = PSLanguageClientImpl()
+  private var client: PSLanguageClientImpl = PSLanguageClientImpl(project)
   private var languageServer: LanguageServer? = null
   private var initializeFuture: CompletableFuture<InitializeResult>? = null
   private var launcherFuture: Future<*>? = null
Index: src/main/resources/messages/MessagesBundle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
--- src/main/resources/messages/MessagesBundle.properties	(date 1517311721000)
+++ src/main/resources/messages/MessagesBundle.properties	(date 1517154198000)
@@ -15,4 +15,5 @@
 powershell.download.link=https://github.com/powershell/powershell#get-powershell
 powershell.install.message=\nPowerShell executable not found in PATH. <a href="{0}">Install</a>
 vs.code.powershell.extension.configure.message=\nWould you like to <a href="{0}">install</a> PowerShell VSCode extension to get more rich PowerShell Editor assistance? \nIf extension is installed, you can specify the path manually in <a href="{1}">Settings</a>.
-settings.powershell.lsp.is.enabled.box.text=Integrate Editor with PowerShell Language Server
\ No newline at end of file
+settings.powershell.lsp.is.enabled.box.text=Integrate Editor with PowerShell Language Server
+editor.services.inspection=PowerShell Language Server Inspection
\ No newline at end of file
Index: src/main/resources/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/plugin.xml	(date 1517311721000)
+++ src/main/resources/META-INF/plugin.xml	(date 1517223355000)
@@ -128,6 +128,10 @@
     <!--LSP-->
     <typedHandler implementation="com.intellij.plugin.powershell.lang.lsp.ide.listeners.LSPTypedHandler" id="LSPTypedHandler"/>
 
+    <localInspection language="PowerShell" shortName="PowerShellLSPInspection" bundle="messages.MessagesBundle" key="editor.services.inspection"
+                     groupKey="settings.powershell" enabledByDefault="true" level="WARNING"
+                     implementationClass="com.intellij.plugin.powershell.lang.lsp.ide.inspection.EditorServicesInspection"/>
+
     <applicationConfigurable id="Settings.PowerShell"
                              groupId="language"
                              instance="com.intellij.plugin.powershell.lang.lsp.ide.settings.PowerShellConfigurable"
