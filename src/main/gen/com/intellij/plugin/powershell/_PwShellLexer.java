/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.intellij.plugin.powershell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.plugin.powershell.psi.PowerShellTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_PwShellLexer.flex</tt>
 */
public class _PwShellLexer implements FlexLexer {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;

  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16912 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
      "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
          "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32" +
          "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1" +
          "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\2\21\1\26\1\57\1\60\5\21\2\26" +
          "\1\61\7\21\1\26\1\62\20\21\1\26\1\63\1\21\1\64\40\21\1\65\5\21\1\66\11\21" +
          "\1\67\1\70\1\71\1\72\1\21\1\73\6\21\1\74\2\21\1\75\1\76\7\21\123\26\1\77\7" +
          "\26\1\100\1\101\12\26\1\102\24\21\1\26\1\103\u0582\21\1\104\u017f\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
      "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16" +
          "\1\17\1\20\1\21\2\7\1\22\3\7\1\22\71\7\1\23\1\7\1\24\1\0\1\25\1\26\2\0\16" +
          "\27\1\30\1\31\1\32\1\33\2\7\1\34\11\7\1\35\21\7\1\36\1\37\24\7\1\40\3\7\1" +
          "\22\1\41\1\40\4\7\1\0\1\42\4\27\1\43\1\44\1\0\3\7\2\45\3\0\1\27\1\46\5\7\1" +
          "\47\2\27\1\50\1\51\1\52\13\7\1\53\1\54\1\55\1\56\1\50\1\57\2\0\1\60\3\7\3" +
          "\27\1\61\12\7\1\62\1\27\1\63\1\0\1\50\1\64\3\7\1\47\1\65\1\66\2\7\1\62\1\67" +
          "\1\70\1\71\2\0\3\7\1\72\10\0\2\7\1\25\5\0\1\73\3\27\1\74\6\7\1\75\2\27\1\76" +
          "\1\7\1\77\1\50\1\40\1\7\1\100\1\101\1\102\2\7\1\103\1\104\1\105\1\54\1\106" +
          "\1\107\1\110\1\77\1\50\1\24\1\0\1\111\1\112\1\102\2\7\1\103\1\113\1\114\1" +
          "\115\1\116\1\117\1\120\1\121\1\50\1\122\1\0\1\111\1\35\1\34\2\7\1\103\1\123" +
          "\1\105\1\43\1\124\1\125\1\0\1\77\1\50\1\0\1\41\1\111\1\101\1\102\2\7\1\103" +
          "\1\123\1\105\1\54\1\116\1\126\1\110\1\77\1\50\1\41\1\0\1\127\1\130\1\131\1" +
          "\132\1\133\1\130\1\7\1\134\1\135\1\136\1\137\1\0\1\121\1\50\2\0\1\140\1\30" +
          "\1\103\2\7\1\103\1\7\1\141\1\142\1\136\1\143\1\45\1\77\1\50\2\0\1\111\1\30" +
          "\1\103\2\7\1\103\1\144\1\105\1\142\1\136\1\143\1\32\1\77\1\50\1\145\1\0\1" +
          "\111\1\30\1\103\4\7\1\146\1\142\1\147\1\107\1\150\1\77\1\50\1\0\1\151\1\152" +
          "\1\7\1\22\1\151\2\7\1\34\1\153\1\22\1\154\1\155\1\27\1\121\1\50\1\156\1\0" +
          "\1\40\5\7\1\157\1\46\1\160\1\161\1\50\1\162\4\0\1\163\1\164\1\165\1\40\1\166" +
          "\1\167\1\157\1\170\1\171\1\172\1\50\1\173\4\0\1\125\2\0\1\174\1\50\1\162\1" +
          "\175\1\176\1\7\1\40\3\7\1\25\1\42\1\27\1\142\1\177\1\27\1\42\3\27\1\200\1" +
          "\201\7\0\5\7\1\47\1\27\1\202\1\50\1\162\1\62\1\203\1\204\1\205\1\206\1\7\1" +
          "\207\1\210\1\50\1\211\4\7\1\35\1\20\5\7\1\212\51\7\1\131\1\22\1\131\5\7\1" +
          "\131\4\7\1\131\1\22\1\131\1\7\1\22\7\7\1\131\10\7\1\213\4\0\2\7\2\0\12\7\2" +
          "\214\1\40\114\7\1\101\2\7\1\215\2\7\1\45\11\7\1\216\1\52\1\125\1\7\1\30\1" +
          "\217\1\0\2\7\1\217\1\0\2\7\1\220\1\0\1\7\1\30\1\221\1\0\6\7\1\222\3\27\1\223" +
          "\1\224\1\50\1\162\3\0\1\225\1\50\1\162\13\7\1\0\5\7\1\226\10\7\1\214\1\0\3" +
          "\7\1\22\1\27\1\227\1\27\1\227\1\121\1\50\3\7\1\214\1\25\1\0\5\7\1\230\3\7" +
          "\1\24\1\50\1\162\4\0\2\7\1\160\1\227\6\7\1\177\1\161\3\27\1\54\1\50\1\162" +
          "\1\50\1\162\1\150\1\0\1\27\1\161\10\0\1\231\5\7\1\222\1\27\1\231\1\230\1\50" +
          "\1\162\1\0\1\73\1\227\1\0\1\232\3\7\1\76\1\205\1\50\1\64\4\7\1\62\1\27\1\227" +
          "\1\0\4\7\1\222\2\27\1\0\1\50\1\233\1\50\1\64\3\7\1\214\12\0\1\234\2\27\1\235" +
          "\1\236\1\174\30\7\6\27\1\172\1\237\42\7\2\214\4\7\2\214\1\7\1\240\3\7\1\214" +
          "\6\7\1\30\1\171\1\241\1\25\1\242\1\230\1\7\1\25\1\241\1\25\1\243\1\244\3\0" +
          "\1\245\1\0\1\107\1\246\1\0\1\247\1\250\2\0\1\41\1\150\2\0\1\7\1\25\6\0\4\27" +
          "\1\246\1\0\1\251\1\151\1\153\1\252\1\26\1\253\1\7\1\254\1\255\1\256\2\0\4" +
          "\27\1\257\1\246\144\0\1\126\6\27\1\174\42\0\5\7\1\22\5\7\1\22\20\7\1\25\1" +
          "\260\1\261\1\0\4\7\1\35\1\20\7\7\1\150\1\0\1\107\2\7\1\22\1\0\10\22\4\27\5" +
          "\0\1\150\72\0\1\262\3\0\1\42\1\27\1\252\1\263\1\40\11\7\1\22\1\264\1\40\12" +
          "\7\1\212\1\255\4\7\1\214\1\40\12\7\1\22\2\0\3\7\1\45\6\0\170\7\1\214\11\0" +
          "\72\7\1\214\5\0\21\7\1\25\10\0\5\7\1\214\41\7\1\25\2\7\1\50\1\265\2\0\5\7" +
          "\1\160\1\234\1\266\3\7\1\62\10\7\1\62\1\27\1\174\3\0\1\150\1\7\1\151\14\7" +
          "\1\102\3\7\1\214\1\7\7\0\1\150\1\7\1\267\1\270\2\7\1\47\3\0\6\7\1\230\1\0" +
          "\1\37\5\7\1\222\1\27\1\200\1\0\1\50\1\162\2\27\1\37\1\271\1\50\1\64\2\7\1" +
          "\62\1\172\2\7\1\160\1\27\1\227\1\0\3\7\1\25\1\74\5\7\1\47\1\27\1\246\1\150" +
          "\1\50\1\162\1\272\1\7\1\50\1\273\5\7\1\76\1\161\1\0\1\270\1\274\1\50\1\162" +
          "\2\7\1\22\1\275\6\7\1\204\1\276\1\226\2\0\1\277\1\7\1\47\1\300\1\0\3\301\1" +
          "\0\2\22\5\7\1\212\1\214\1\0\16\7\1\47\1\302\1\50\1\162\64\7\1\230\1\0\2\7" +
          "\1\22\1\303\5\7\1\230\40\0\55\7\1\214\15\7\1\24\4\0\1\22\1\0\1\303\1\304\1" +
          "\7\1\103\1\22\1\171\1\305\15\7\1\24\3\0\1\303\54\7\1\214\2\0\10\7\1\151\6" +
          "\7\5\0\1\7\1\230\2\27\2\0\2\27\1\306\2\0\1\307\4\0\1\30\20\7\1\25\2\0\1\50" +
          "\1\162\1\40\2\7\1\310\1\40\2\7\1\45\1\311\12\7\1\22\3\151\1\312\4\0\1\7\1" +
          "\144\2\7\1\22\2\7\1\313\1\7\1\214\1\7\1\214\4\0\17\7\1\45\10\0\6\27\1\200" +
          "\20\0\1\314\20\0\3\7\1\25\6\7\1\125\1\0\1\246\3\0\4\7\2\0\2\7\1\60\1\315\4" +
          "\7\1\62\1\46\3\7\1\214\4\7\1\230\1\7\1\316\5\0\23\7\1\214\1\50\1\162\12\0" +
          "\5\7\1\0\6\7\1\230\23\0\46\7\1\22\1\0\2\7\1\214\1\0\1\7\23\0\1\214\1\103\4" +
          "\7\1\35\1\317\2\7\1\214\1\0\2\7\1\22\1\0\3\7\1\22\10\0\2\7\1\320\1\0\2\7\1" +
          "\214\1\0\3\7\1\24\10\0\7\7\1\311\10\0\1\321\1\237\1\144\1\40\2\7\1\230\1\115" +
          "\4\0\3\7\1\25\3\7\1\25\4\0\1\7\1\40\2\7\1\322\3\0\6\7\1\214\1\0\2\7\1\214" +
          "\1\0\2\7\1\45\1\0\2\7\1\24\15\0\11\7\1\125\6\0\6\7\1\45\1\0\6\7\1\45\41\0" +
          "\1\232\6\7\1\27\1\161\3\0\1\121\1\50\1\0\1\107\1\232\5\7\1\27\1\46\2\0\3\7" +
          "\1\125\1\50\1\162\1\232\3\7\1\160\1\27\1\323\1\50\2\0\4\7\1\324\1\0\1\232" +
          "\5\7\1\47\1\27\1\325\1\326\1\50\1\327\4\0\2\7\1\34\2\7\1\222\1\27\11\0\1\22" +
          "\1\253\1\7\1\35\1\7\1\125\5\7\1\160\1\27\1\46\1\50\1\162\1\140\1\101\1\102" +
          "\2\7\1\103\1\123\1\105\1\54\1\116\1\137\1\255\1\330\2\200\41\0\6\7\2\27\1" +
          "\331\1\0\1\50\1\162\24\0\5\7\1\160\1\172\1\27\1\246\2\0\1\274\4\0\6\7\2\27" +
          "\1\332\1\0\1\50\1\162\4\0\5\7\1\47\1\27\1\0\1\50\1\162\6\0\3\7\1\333\1\27" +
          "\1\227\1\50\1\162\54\0\10\7\1\50\1\162\1\0\1\150\70\0\7\7\1\125\40\0\63\7" +
          "\1\24\14\0\15\27\1\161\2\0\30\7\1\230\27\0\5\7\1\22\72\0\10\7\1\22\67\0\7" +
          "\7\1\125\3\7\1\22\1\50\1\162\14\0\3\7\1\214\1\200\1\0\6\7\1\161\1\0\1\230" +
          "\1\0\1\50\1\162\1\303\2\7\1\255\2\7\56\0\10\7\1\25\1\0\1\76\4\27\1\161\1\0" +
          "\1\107\1\232\1\7\14\0\1\24\77\0\15\7\1\45\1\7\1\25\1\7\1\125\1\7\1\334\130" +
          "\0\1\307\1\335\1\46\1\73\1\336\1\227\3\0\1\337\22\0\1\326\67\0\12\7\1\30\10" +
          "\7\1\30\1\340\1\341\1\7\1\342\1\144\7\7\1\35\1\343\2\30\3\7\1\344\1\171\1" +
          "\151\1\103\51\7\1\214\3\7\1\103\2\7\1\212\3\7\1\212\2\7\1\30\3\7\1\30\2\7" +
          "\1\22\3\7\1\22\3\7\1\103\3\7\1\103\2\7\1\212\1\345\6\50\6\27\1\161\1\73\5" +
          "\27\1\200\1\314\1\0\1\247\2\0\1\73\1\42\1\27\52\0\30\7\1\25\1\0\1\161\45\0" +
          "\1\144\3\7\1\163\1\40\1\212\1\346\1\251\1\347\1\163\1\240\1\163\2\212\1\120" +
          "\1\7\1\34\1\7\1\230\1\350\1\34\1\7\1\230\116\0\3\27\1\174\3\27\1\174\3\27" +
          "\1\174\16\0\32\7\1\22\5\0\106\7\1\25\1\0\33\7\1\214\120\7\1\24\53\0\3\7\1" +
          "\214\134\0\36\27\2\0");

  /* The ZZ_CMAP_A table has 1864 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
      "\11\0\1\3\1\2\1\43\1\4\1\2\2\0\1\3\1\0\1\41\1\54\1\60\1\0\1\31\1\44\1\55\1" +
          "\56\1\27\1\50\1\75\1\5\1\61\1\0\1\46\1\32\1\33\1\34\1\35\1\36\1\37\3\46\1" +
          "\62\1\61\1\40\1\100\1\30\1\53\1\45\4\51\1\47\15\51\1\61\1\42\2\0\1\51\1\0" +
          "\1\6\1\63\1\10\1\65\1\15\1\66\1\17\1\23\1\14\1\26\1\21\1\20\1\22\1\12\1\11" +
          "\1\25\1\16\1\24\1\7\1\13\1\64\1\72\1\71\1\70\1\67\1\51\1\76\1\101\1\77\7\0" +
          "\1\1\2\0\1\61\11\0\1\51\1\73\11\0\1\51\4\0\1\51\1\74\4\0\7\51\1\0\2\51\4\0" +
          "\4\51\6\0\5\51\7\0\1\51\1\0\1\51\1\0\10\57\5\51\1\0\2\51\2\0\4\51\1\0\1\51" +
          "\6\0\1\51\1\0\3\51\1\0\1\51\1\0\4\51\1\0\13\51\1\0\3\51\1\0\7\57\6\51\1\0" +
          "\7\51\1\0\1\51\7\0\15\57\1\0\1\57\1\0\2\57\1\0\2\57\1\0\1\57\3\51\5\0\3\57" +
          "\5\0\3\51\5\57\12\52\4\0\2\51\1\57\13\51\1\0\1\51\7\57\2\0\6\57\2\51\2\57" +
          "\1\0\4\57\2\51\2\52\3\51\2\0\2\51\1\57\6\51\3\57\2\0\11\51\3\57\1\51\6\0\2" +
          "\52\6\51\4\57\2\51\4\0\1\51\5\0\2\57\1\51\11\57\1\51\3\57\1\51\5\57\2\0\1" +
          "\51\3\57\7\0\11\57\6\51\3\57\1\51\2\57\1\51\7\57\2\51\2\57\2\0\2\52\1\51\3" +
          "\57\1\0\10\51\2\0\2\51\2\0\6\51\1\0\7\51\1\0\1\51\3\0\4\51\2\0\1\57\1\51\3" +
          "\57\2\0\3\57\1\51\10\0\1\57\4\0\2\51\1\0\1\51\1\0\3\57\1\0\6\51\4\0\2\51\1" +
          "\0\2\51\1\0\2\51\1\0\2\51\2\0\1\57\1\0\5\57\4\0\2\57\2\0\3\57\3\0\1\57\7\0" +
          "\4\51\1\0\1\51\7\0\2\52\2\57\3\51\1\57\2\0\1\51\1\0\2\51\1\0\3\51\2\57\1\0" +
          "\3\57\2\0\1\51\15\0\2\57\2\0\1\57\1\51\1\0\6\51\3\0\3\51\1\0\4\51\3\0\2\51" +
          "\1\0\1\51\1\0\2\51\3\0\2\51\3\0\2\51\4\0\5\57\3\0\3\57\1\0\4\57\2\0\1\51\6" +
          "\0\5\57\1\0\5\51\3\0\1\51\7\57\1\0\2\57\5\0\2\57\1\0\4\51\1\0\3\51\1\0\2\51" +
          "\5\0\3\51\2\0\1\51\3\57\1\0\4\57\1\51\10\0\1\51\2\0\6\51\2\0\2\57\1\0\7\51" +
          "\1\0\1\51\4\0\1\57\4\0\6\57\1\0\1\57\3\0\2\57\4\0\1\51\1\57\2\51\4\57\7\51" +
          "\10\57\1\0\2\52\7\0\2\51\1\0\1\51\2\0\2\51\1\0\1\51\2\0\1\51\6\0\4\51\1\0" +
          "\3\51\1\0\1\51\1\0\1\51\2\0\2\51\1\0\3\51\2\57\1\0\2\57\1\51\2\0\5\51\1\0" +
          "\1\51\1\0\6\57\2\0\2\52\2\0\4\51\2\57\13\0\1\57\1\0\1\57\1\0\1\57\4\0\2\57" +
          "\5\51\10\57\11\0\1\57\1\0\7\57\1\51\2\57\4\51\3\57\1\51\3\57\2\51\7\57\3\51" +
          "\4\57\5\51\14\57\1\51\1\57\2\52\4\57\2\0\3\51\1\0\7\51\2\0\3\57\6\51\2\0\1" +
          "\61\12\51\3\0\2\57\2\51\3\57\3\0\2\51\2\57\4\0\1\51\1\0\2\57\4\0\4\51\10\57" +
          "\3\0\1\51\4\0\1\51\1\57\5\0\3\57\2\0\1\51\1\57\1\51\5\0\4\57\4\0\4\51\4\0" +
          "\5\57\3\51\3\57\5\51\2\52\3\0\3\51\3\57\1\0\5\57\4\51\1\57\4\51\3\57\2\51" +
          "\5\0\4\57\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51\2\0\3\51\1\0\6\51\2\0\2\51\13" +
          "\61\5\0\2\1\5\0\1\61\1\57\13\0\1\57\12\0\1\61\2\0\1\51\4\0\1\51\1\0\5\51\2" +
          "\0\1\51\1\0\4\51\1\0\3\51\2\0\4\51\5\0\5\51\4\0\1\51\1\0\3\57\2\51\3\57\3" +
          "\0\4\51\3\57\2\51\4\0\1\61\4\0\2\51\4\57\2\51\4\0\2\57\2\0\3\51\2\52\2\51" +
          "\4\0\6\57\1\0\3\51\1\57\3\51\1\57\4\51\1\57\4\51\3\0\1\51\1\0\1\51\2\0\5\51" +
          "\1\57\2\51\2\52\5\51\1\0\4\51\2\57\4\0\1\51\3\57\2\51\1\57\5\51\2\57\3\0\3" +
          "\51\4\0\3\51\2\57\2\0\6\51\1\0\3\57\1\0\2\57\5\0\5\51\5\0\1\51\1\57\3\51\1" +
          "\0\2\51\1\0\2\51\3\0\2\57\10\0\3\57\3\51\4\0\1\57\6\0\2\51\2\0\3\51\3\0\3" +
          "\51\1\0\2\51\1\0\1\51\5\0\1\57\2\0\2\51\1\57\6\0\5\57\2\0\1\51\3\0\1\51\2" +
          "\0\4\51\1\0\2\51\2\0\1\51\3\57\1\0\2\57\1\0\5\51\2\57\1\0\5\57\1\0\2\52\3" +
          "\51\1\57\2\0\1\51\1\0\1\57\4\51\5\0\3\57\3\0\2\52\1\51\1\0\1\51\3\0\2\51\2" +
          "\57\2\0\6\57\2\51\1\0\1\51\1\57\3\0\1\51\3\0\2\51\3\0\3\57\2\51\3\0\2\57\1" +
          "\0\2\57\3\0\6\57\2\0\3\57\2\0\4\57\4\0\1\51\2\0\2\51\2\0\4\51\1\0\4\51\1\0" +
          "\1\51\1\0\6\51\2\0\5\51\1\0\4\51\1\0\4\51\2\0\2\52\1\0\1\51\1\0\1\51\5\0\1" +
          "\51\1\0\1\51\1\0\3\51\1\0\3\51\1\0\3\51");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
      "\1\0\1\1\1\2\1\3\1\1\10\4\1\1\1\5" +
          "\1\6\6\7\1\5\2\1\1\10\1\7\1\4\1\1" +
          "\1\4\1\11\1\12\1\13\1\14\1\15\1\16\6\4" +
          "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
          "\14\0\6\4\1\27\1\30\1\14\2\4\1\31\1\0" +
          "\4\4\1\0\1\32\1\33\1\0\1\5\1\0\1\5" +
          "\2\0\1\34\2\0\1\35\2\0\1\36\1\37\5\4" +
          "\1\40\11\4\1\41\1\42\14\41\2\42\4\41\6\4" +
          "\1\43\1\4\1\31\1\44\1\4\1\31\4\4\11\0" +
          "\1\11\7\4\1\45\6\4\1\46\12\41\5\4\1\47" +
          "\1\4\1\50\1\51\3\4\1\52\10\0\4\4\1\53" +
          "\5\4\1\54\3\4\6\41\1\4\1\55\1\4\1\56" +
          "\1\57\4\4\1\60\1\4\1\61\1\62\1\11\1\63" +
          "\1\64\1\65\1\66\7\4\1\67\2\41\1\70\2\4" +
          "\1\71\1\72\2\4\1\73\3\4\1\74\2\4\1\41" +
          "\3\4\1\75\1\4\1\76\1\77\2\4\1\41\1\100" +
          "\1\4\1\101\1\4\1\102\1\103\6\4\1\104\1\105";

  private static int[] zzUnpackAction() {
    int[] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce" +
          "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de" +
          "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\102\0\u05ac" +
          "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc" +
          "\0\102\0\u07fe\0\102\0\102\0\u0840\0\u0882\0\u08c4\0\u0906" +
          "\0\u0948\0\u098a\0\102\0\102\0\102\0\102\0\102\0\102" +
          "\0\102\0\102\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16" +
          "\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26" +
          "\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u014a\0\u0eb2\0\u0ef4" +
          "\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104" +
          "\0\102\0\102\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u05ac" +
          "\0\102\0\u1290\0\u05ee\0\102\0\u12d2\0\u1314\0\102\0\u1356" +
          "\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u014a\0\u14e2\0\u1524" +
          "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734" +
          "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902" +
          "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u18c0\0\u1ad0" +
          "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0" +
          "\0\u1d22\0\u014a\0\u1d64\0\u0eb2\0\u014a\0\u1da6\0\u0fba\0\u1de8" +
          "\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8" +
          "\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208" +
          "\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418" +
          "\0\u245a\0\u249c\0\u24de\0\u014a\0\102\0\u2520\0\u2562\0\u25a4" +
          "\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4" +
          "\0\u27f6\0\u2838\0\u287a\0\u014a\0\u28bc\0\u28fe\0\u014a\0\u2940" +
          "\0\u2982\0\u29c4\0\102\0\u039c\0\u2a06\0\u2a48\0\u2a8a\0\u2acc" +
          "\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u014a" +
          "\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u014a\0\u2e26\0\u2e68" +
          "\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078" +
          "\0\u014a\0\u30ba\0\u014a\0\u014a\0\u30fc\0\u313e\0\u3180\0\u31c2" +
          "\0\u014a\0\u3204\0\102\0\102\0\102\0\u014a\0\u014a\0\u014a" +
          "\0\u014a\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2" +
          "\0\u014a\0\u3414\0\u3456\0\u014a\0\u3498\0\u34da\0\u014a\0\u014a" +
          "\0\u351c\0\u355e\0\u014a\0\u35a0\0\u35e2\0\u3624\0\u014a\0\u3666" +
          "\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u014a\0\u37f2\0\u014a" +
          "\0\u014a\0\u3834\0\u3876\0\u38b8\0\u014a\0\u38fa\0\u014a\0\u393c" +
          "\0\u014a\0\u014a\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8" +
          "\0\u014a\0\u014a";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
      "\2\2\1\3\2\4\1\5\1\6\1\7\1\10\2\6" +
          "\1\11\1\12\1\13\6\6\1\14\1\15\1\6\1\16" +
          "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
          "\1\27\1\30\2\2\1\31\1\32\1\33\1\34\1\35" +
          "\2\6\1\36\1\37\1\40\1\41\1\42\1\43\1\2" +
          "\1\44\1\45\1\46\1\47\1\50\2\6\1\51\1\52" +
          "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\104\0" +
          "\3\3\77\0\1\3\2\4\102\0\1\62\1\63\1\64" +
          "\1\65\1\66\1\67\1\66\1\70\1\71\1\66\1\72" +
          "\1\73\1\66\1\74\1\66\1\75\1\66\1\76\20\0" +
          "\1\66\1\0\1\66\1\0\1\66\7\0\10\66\14\0" +
          "\1\42\21\6\3\0\6\6\6\0\2\6\1\0\2\6" +
          "\1\36\3\0\2\42\2\0\10\6\14\0\1\42\21\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\6\6\1\77\1\6\14\0\1\42\1\100" +
          "\2\6\1\101\6\6\1\102\6\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\15\6\1\103\1\104\2\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\4\6\1\105\14\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\3\6\1\106\4\6\14\0\1\107\4\6\1\110\5\6" +
          "\1\111\6\6\3\0\6\112\6\0\1\112\1\6\1\113" +
          "\2\6\1\36\3\0\2\42\2\0\5\6\1\114\2\6" +
          "\14\0\1\42\7\6\1\115\11\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\1\116\15\6\1\117\2\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\37\0\1\120\25\0\1\121\53\0\1\27\51\0" +
          "\31\122\1\0\50\122\5\0\1\42\21\6\1\0\1\123" +
          "\1\0\6\33\6\0\1\33\1\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\21\6\1\0" +
          "\1\124\1\0\6\33\6\0\1\33\1\6\1\0\2\6" +
          "\1\36\3\0\2\42\2\0\10\6\14\0\1\42\21\6" +
          "\1\0\1\125\1\0\6\33\6\0\1\33\1\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\21\6\1\0\1\120\1\0\6\33\6\0\1\33\1\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\10\6\14\0" +
          "\1\42\21\6\1\0\1\126\1\0\6\33\6\0\1\33" +
          "\1\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\21\6\1\0\1\127\1\0\6\33\6\0" +
          "\1\33\1\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\7\0\41\130\1\131\1\132\37\130\44\133\1\134" +
          "\35\133\41\0\1\135\2\0\1\136\42\0\1\42\21\6" +
          "\3\0\6\33\6\0\1\33\1\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\107\21\6\3\0" +
          "\6\112\6\0\1\112\1\6\1\113\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\57\0\1\137\37\0\21\36\3\0" +
          "\6\36\6\0\2\36\1\0\3\36\7\0\10\36\7\0" +
          "\1\37\2\0\1\37\1\0\36\37\1\0\36\37\27\0" +
          "\1\140\57\0\22\42\3\0\6\42\6\0\2\42\1\0" +
          "\2\42\4\0\2\42\2\0\10\42\14\0\1\42\7\6" +
          "\1\141\6\6\1\142\2\6\3\0\6\6\6\0\2\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\10\6\14\0" +
          "\1\42\1\6\1\143\2\6\1\144\14\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\1\145\2\6\1\146\3\6\1\147" +
          "\11\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\4\6\1\150\3\6\14\0\1\42" +
          "\3\6\1\151\2\6\1\152\7\6\1\153\2\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\1\6\1\154\6\6\14\0\1\42\3\6\1\155" +
          "\11\6\1\156\3\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\1\157\20\6\3\0\6\6\6\0\2\6\1\0\2\6" +
          "\1\36\3\0\2\42\2\0\10\6\7\0\1\160\4\0" +
          "\2\160\1\161\21\160\1\0\11\160\1\0\11\160\2\0" +
          "\2\160\2\0\12\160\3\0\1\160\1\0\1\160\4\0" +
          "\16\160\1\162\1\160\1\163\3\160\1\0\11\160\1\0" +
          "\11\160\2\0\2\160\2\0\12\160\3\0\1\160\1\0" +
          "\1\160\4\0\2\160\1\164\1\165\1\166\1\167\2\160" +
          "\1\170\1\160\1\171\1\172\1\160\1\173\1\160\1\174" +
          "\4\160\1\0\11\160\1\0\11\160\2\0\2\160\2\0" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\24\160\1\0" +
          "\11\160\1\0\11\160\2\0\2\160\2\0\12\160\3\0" +
          "\1\160\1\0\1\160\4\0\4\160\1\175\3\160\1\161" +
          "\13\160\1\0\11\160\1\0\11\160\2\0\2\160\2\0" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\2\160\1\176" +
          "\1\165\1\160\1\177\2\160\1\170\1\160\1\171\1\172" +
          "\1\160\1\173\1\160\1\174\4\160\1\0\11\160\1\0" +
          "\11\160\2\0\2\160\2\0\12\160\3\0\1\160\1\0" +
          "\1\160\4\0\11\160\1\161\12\160\1\0\11\160\1\0" +
          "\11\160\2\0\2\160\2\0\12\160\3\0\1\160\1\0" +
          "\1\160\4\0\6\160\1\161\1\160\1\161\13\160\1\0" +
          "\11\160\1\0\11\160\2\0\2\160\2\0\12\160\3\0" +
          "\1\160\1\0\1\160\4\0\6\160\1\161\1\200\1\161" +
          "\13\160\1\0\11\160\1\0\11\160\2\0\2\160\2\0" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\1\160\1\201" +
          "\22\160\1\0\11\160\1\0\11\160\2\0\2\160\2\0" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\10\160\1\202" +
          "\13\160\1\0\11\160\1\0\11\160\2\0\2\160\2\0" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\4\160\1\203" +
          "\17\160\1\0\11\160\1\0\11\160\2\0\2\160\2\0" +
          "\12\160\3\0\1\160\6\0\1\42\6\6\1\204\12\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\5\6\1\205\13\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\4\6\1\206\14\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\1\207\20\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\16\6\1\210\2\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\1\211\20\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\4\6\1\212\3\6\14\0\1\42\12\6\1\213\6\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\22\42\3\0\6\214\6\0" +
          "\1\214\1\42\1\0\2\42\4\0\2\42\2\0\10\42" +
          "\14\0\1\42\21\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\2\6\1\215\5\6" +
          "\14\0\1\42\1\6\1\216\17\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\21\6\3\0\6\112\6\0\1\112\1\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\10\6\41\0" +
          "\6\217\6\0\1\217\40\0\1\42\6\6\1\220\12\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\5\6\1\221\13\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\16\6\1\222\2\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\3\6\1\223\15\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\37\0\1\27\1\224\101\0\1\225" +
          "\100\0\1\226\1\227\100\0\1\230\1\224\100\0\1\231" +
          "\1\224\100\0\1\232\1\224\50\0\1\130\2\0\1\130" +
          "\1\0\36\130\1\0\36\130\2\0\1\233\2\135\36\0" +
          "\1\135\40\0\1\234\2\136\36\0\1\136\36\0\27\235" +
          "\1\0\52\235\5\0\1\42\11\6\1\236\7\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\7\6\1\237\11\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\6\6\1\240\12\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\5\6\1\241\13\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\5\6\1\242\13\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\21\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\3\6" +
          "\1\243\4\6\14\0\1\42\4\6\1\244\14\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\16\6\1\245\2\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\4\6\1\246\5\6\1\247" +
          "\6\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\3\6\1\250" +
          "\15\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\4\6\1\251" +
          "\14\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\16\6\1\252" +
          "\2\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\6\6\1\253" +
          "\12\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\16\6\1\254" +
          "\2\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\7\0\1\160\4\0\24\160" +
          "\1\0\11\160\1\0\11\160\2\0\2\160\1\0\1\255" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\13\160\1\161" +
          "\3\160\1\161\4\160\1\0\11\160\1\0\11\160\2\0" +
          "\2\160\1\0\1\255\12\160\3\0\1\160\1\0\1\160" +
          "\4\0\13\160\1\256\10\160\1\0\11\160\1\0\11\160" +
          "\2\0\2\160\1\0\1\255\12\160\3\0\1\160\1\0" +
          "\1\160\4\0\20\160\1\163\3\160\1\0\11\160\1\0" +
          "\11\160\2\0\2\160\1\0\1\255\12\160\3\0\1\160" +
          "\1\0\1\160\4\0\4\160\1\166\17\160\1\0\11\160" +
          "\1\0\11\160\2\0\2\160\1\0\1\255\12\160\3\0" +
          "\1\160\1\0\1\160\4\0\5\160\1\257\16\160\1\0" +
          "\11\160\1\0\11\160\2\0\2\160\1\0\1\255\12\160" +
          "\3\0\1\160\1\0\1\160\4\0\4\160\1\260\3\160" +
          "\1\161\13\160\1\0\11\160\1\0\11\160\2\0\2\160" +
          "\1\0\1\255\12\160\3\0\1\160\1\0\1\160\4\0" +
          "\11\160\1\161\12\160\1\0\11\160\1\0\11\160\2\0" +
          "\2\160\1\0\1\255\12\160\3\0\1\160\1\0\1\160" +
          "\4\0\6\160\1\161\1\160\1\161\13\160\1\0\11\160" +
          "\1\0\11\160\2\0\2\160\1\0\1\255\12\160\3\0" +
          "\1\160\1\0\1\160\4\0\6\160\1\161\1\200\1\161" +
          "\13\160\1\0\11\160\1\0\11\160\2\0\2\160\1\0" +
          "\1\255\12\160\3\0\1\160\1\0\1\160\4\0\1\160" +
          "\1\201\22\160\1\0\11\160\1\0\11\160\2\0\2\160" +
          "\1\0\1\255\12\160\3\0\1\160\1\0\1\160\4\0" +
          "\10\160\1\202\13\160\1\0\11\160\1\0\11\160\2\0" +
          "\2\160\1\0\1\255\12\160\3\0\1\160\1\0\1\160" +
          "\4\0\6\160\1\261\15\160\1\0\11\160\1\0\11\160" +
          "\2\0\2\160\1\0\1\255\12\160\3\0\1\160\1\0" +
          "\1\160\4\0\5\160\1\262\12\160\1\163\3\160\1\0" +
          "\11\160\1\0\11\160\2\0\2\160\1\0\1\255\12\160" +
          "\3\0\1\160\1\0\1\160\4\0\14\160\1\263\7\160" +
          "\1\0\11\160\1\0\11\160\2\0\2\160\1\0\1\255" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\6\160\1\264" +
          "\15\160\1\0\11\160\1\0\11\160\2\0\2\160\1\0" +
          "\1\255\12\160\3\0\1\160\1\0\1\160\4\0\20\160" +
          "\1\265\3\160\1\0\11\160\1\0\11\160\2\0\2\160" +
          "\1\0\1\255\12\160\3\0\1\160\1\0\1\160\4\0" +
          "\7\160\1\266\14\160\1\0\11\160\1\0\11\160\2\0" +
          "\2\160\1\0\1\255\12\160\3\0\1\160\6\0\1\42" +
          "\5\6\1\267\13\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\2\6\1\270\16\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\5\6\1\271\13\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\1\6\1\272\17\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\3\6\1\273\15\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\17\6\1\274\1\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\6\6\1\275\12\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\7\6\1\276\11\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\5\6\1\277\13\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\10\6\14\0\1\42" +
          "\21\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\1\6\1\300\6\6\14\0\1\42" +
          "\1\301\20\6\3\0\6\6\6\0\2\6\1\0\2\6" +
          "\1\36\3\0\2\42\2\0\10\6\14\0\1\42\2\6" +
          "\1\302\16\6\3\0\6\6\6\0\2\6\1\0\2\6" +
          "\1\36\3\0\2\42\2\0\10\6\41\0\2\303\101\0" +
          "\1\303\102\0\1\304\77\0\1\303\104\0\1\304\103\0" +
          "\1\304\71\0\1\304\52\0\2\305\3\233\34\305\1\306" +
          "\1\307\1\233\36\305\2\310\3\234\35\310\1\311\1\234" +
          "\1\312\35\310\27\235\1\313\52\235\5\0\1\42\6\6" +
          "\1\314\12\6\3\0\6\6\6\0\2\6\1\0\2\6" +
          "\1\36\3\0\2\42\2\0\10\6\14\0\1\42\1\315" +
          "\20\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\4\6\1\316" +
          "\14\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\6\6\1\317" +
          "\12\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\1\320\20\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\6\6\1\321\12\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\1\322\20\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\7\6\1\323\11\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\1\324\20\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\5\6\1\325\13\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\14\6\1\326\4\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\2\6\1\327\16\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\13\6\1\330\5\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\12\6\1\331\6\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\7\0\1\160\4\0\7\160\1\332\14\160\1\0" +
          "\11\160\1\0\11\160\2\0\2\160\1\0\1\255\12\160" +
          "\3\0\1\160\1\0\1\160\4\0\6\160\1\333\15\160" +
          "\1\0\11\160\1\0\11\160\2\0\2\160\1\0\1\255" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\6\160\1\334" +
          "\15\160\1\0\11\160\1\0\11\160\2\0\2\160\1\0" +
          "\1\255\12\160\3\0\1\160\1\0\1\160\4\0\3\160" +
          "\1\165\3\160\1\266\3\160\1\335\1\160\1\173\6\160" +
          "\1\0\11\160\1\0\11\160\2\0\2\160\1\0\1\255" +
          "\12\160\3\0\1\160\1\0\1\160\4\0\4\160\1\332" +
          "\17\160\1\0\11\160\1\0\11\160\2\0\2\160\1\0" +
          "\1\255\12\160\3\0\1\160\1\0\1\160\4\0\10\160" +
          "\1\161\13\160\1\0\11\160\1\0\11\160\2\0\2\160" +
          "\1\0\1\255\12\160\3\0\1\160\1\0\1\160\4\0" +
          "\3\160\1\336\20\160\1\0\11\160\1\0\11\160\2\0" +
          "\2\160\1\0\1\255\12\160\3\0\1\160\1\0\1\160" +
          "\4\0\13\160\1\337\10\160\1\0\11\160\1\0\11\160" +
          "\2\0\2\160\1\0\1\255\12\160\3\0\1\160\1\0" +
          "\1\160\4\0\5\160\1\161\16\160\1\0\11\160\1\0" +
          "\11\160\2\0\2\160\1\0\1\255\12\160\3\0\1\160" +
          "\6\0\1\42\2\6\1\340\16\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\15\6\1\341\3\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\6\6\1\342\12\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\1\6\1\343\17\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\21\6\3\0\6\6\6\0\2\6\1\0" +
          "\2\6\1\36\3\0\2\42\2\0\6\6\1\344\1\6" +
          "\14\0\1\42\4\6\1\345\14\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\6\6\1\346\12\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\16\6\1\347\2\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\12\6\1\350\1\6\1\351\4\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\14\0\1\42\7\6\1\352\11\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\10\6\7\0\2\305\1\233\36\305\1\0\1\307" +
          "\37\305\45\0\1\353\34\0\1\305\2\0\1\305\1\0" +
          "\36\305\1\0\36\305\2\310\1\234\37\310\1\311\1\310" +
          "\1\0\36\310\2\0\1\310\1\0\36\310\1\0\36\310" +
          "\45\0\1\354\34\0\27\235\1\313\26\235\1\355\23\235" +
          "\5\0\1\42\4\6\1\356\14\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\13\6\1\357\5\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\11\6\1\360\7\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\12\6\1\361\6\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\4\6\1\362\14\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\14\6\1\363\4\6\3\0\6\6\6\0" +
          "\2\6\1\0\2\6\1\36\3\0\2\42\2\0\10\6" +
          "\14\0\1\42\1\364\20\6\3\0\6\6\6\0\2\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\10\6\14\0" +
          "\1\42\12\6\1\365\6\6\3\0\6\6\6\0\2\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\10\6\14\0" +
          "\1\42\7\6\1\366\11\6\3\0\6\6\6\0\2\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\10\6\14\0" +
          "\1\42\5\6\1\367\13\6\3\0\6\6\6\0\2\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\10\6\14\0" +
          "\1\42\21\6\3\0\6\6\6\0\2\6\1\0\2\6" +
          "\1\36\3\0\2\42\2\0\3\6\1\370\4\6\14\0" +
          "\1\42\7\6\1\371\11\6\3\0\6\6\6\0\2\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\10\6\7\0" +
          "\1\160\4\0\6\160\1\161\15\160\1\0\11\160\1\0" +
          "\11\160\2\0\2\160\1\0\1\255\12\160\3\0\1\160" +
          "\1\0\1\160\4\0\1\160\1\372\22\160\1\0\11\160" +
          "\1\0\11\160\2\0\2\160\1\0\1\255\12\160\3\0" +
          "\1\160\1\0\1\160\4\0\3\160\1\165\7\160\1\335" +
          "\1\160\1\173\6\160\1\0\11\160\1\0\11\160\2\0" +
          "\2\160\1\0\1\255\12\160\3\0\1\160\1\0\1\160" +
          "\4\0\7\160\1\200\14\160\1\0\11\160\1\0\11\160" +
          "\2\0\2\160\1\0\1\255\12\160\3\0\1\160\1\0" +
          "\1\160\4\0\16\160\1\161\5\160\1\0\11\160\1\0" +
          "\11\160\2\0\2\160\1\0\1\255\12\160\3\0\1\160" +
          "\1\0\1\160\4\0\1\160\1\373\22\160\1\0\11\160" +
          "\1\0\11\160\2\0\2\160\1\0\1\255\12\160\3\0" +
          "\1\160\6\0\1\42\15\6\1\374\3\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\4\6\1\375\14\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\7\6\1\376\11\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\21\6\3\0\6\6\6\0\2\6" +
          "\1\0\2\6\1\36\3\0\2\42\2\0\3\6\1\377" +
          "\4\6\14\0\1\42\4\6\1\u0100\14\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\12\6\1\u0101\6\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\1\6\1\u0102\17\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\7\6\1\u0103\11\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\6\6\1\u0104\12\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\2\6\1\u0105\16\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\12\6\1\u0106\6\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\16\6\1\u0107\2\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\6\6\1\u0108\12\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\14\0\1\42\12\6\1\u0109\6\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\10\6\7\0\1\160\4\0\7\160\1\u010a\14\160\1\0" +
          "\11\160\1\0\11\160\2\0\2\160\1\0\1\255\12\160" +
          "\3\0\1\160\1\0\1\160\4\0\3\160\1\263\20\160" +
          "\1\0\11\160\1\0\11\160\2\0\2\160\1\0\1\255" +
          "\12\160\3\0\1\160\6\0\1\42\21\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\1\6\1\u010b\6\6\14\0\1\42\1\6\1\u010c\17\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\7\6\1\u010d\11\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\1\6\1\u010e\17\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\2\6\1\u010f\16\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\15\6\1\u0110\3\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\21\6\3\0\6\6" +
          "\6\0\2\6\1\0\2\6\1\36\3\0\2\42\2\0" +
          "\4\6\1\u0111\3\6\14\0\1\42\3\6\1\u0112\15\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\3\6\1\u0113\15\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\7\0\1\160\4\0\5\160\1\u0114" +
          "\16\160\1\0\11\160\1\0\11\160\2\0\2\160\1\0" +
          "\1\255\12\160\3\0\1\160\6\0\1\42\7\6\1\u0115" +
          "\11\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\2\6\1\u0116" +
          "\16\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\12\6\1\u0117" +
          "\6\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\17\6\1\u0118" +
          "\1\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\4\6\1\u0119" +
          "\14\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\21\6\3\0" +
          "\6\6\6\0\2\6\1\0\2\6\1\36\3\0\2\42" +
          "\2\0\6\6\1\u011a\1\6\7\0\1\160\4\0\2\160" +
          "\1\161\21\160\1\0\11\160\1\0\11\160\2\0\2\160" +
          "\1\0\1\255\12\160\3\0\1\160\6\0\1\42\16\6" +
          "\1\u011b\2\6\3\0\6\6\6\0\2\6\1\0\2\6" +
          "\1\36\3\0\2\42\2\0\10\6\14\0\1\42\1\u011c" +
          "\20\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\6\6\1\u011d" +
          "\12\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\16\6\1\u011e" +
          "\2\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\17\6\1\u011f" +
          "\1\6\3\0\6\6\6\0\2\6\1\0\2\6\1\36" +
          "\3\0\2\42\2\0\10\6\14\0\1\42\1\u0120\20\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\5\6\1\u0121\13\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\14\0\1\42\14\6\1\u0122\4\6" +
          "\3\0\6\6\6\0\2\6\1\0\2\6\1\36\3\0" +
          "\2\42\2\0\10\6\7\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[15114];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
      "Unknown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\1\0\1\11\24\1\1\11\11\1\1\11\1\1\2\11" +
          "\6\1\10\11\14\0\14\1\1\0\4\1\1\0\2\11" +
          "\1\0\1\1\1\0\1\1\2\0\1\11\2\0\1\11" +
          "\2\0\1\11\64\1\11\0\20\1\1\11\25\1\1\11" +
          "\10\0\37\1\3\11\65\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * the input device
   */
  private java.io.Reader zzReader;

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;

  /* user code: */
  public _PwShellLexer() {
    this((java.io.Reader) null);
  }


  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public _PwShellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return BAD_CHARACTER;
          }
          case 70:
            break;
          case 2: {
            return NLS;
          }
          case 71:
            break;
          case 3: {
            return WHITE_SPACE;
          }
          case 72:
            break;
          case 4: {
            return VAR_SIMPLE;
          }
          case 73:
            break;
          case 5: {
            return OP_FR;
          }
          case 74:
            break;
          case 6: {
            return AMP;
          }
          case 75:
            break;
          case 7: {
            return DIGITS;
          }
          case 76:
            break;
          case 8: {
            return AT;
          }
          case 77:
            break;
          case 9: {
            return COMMENT;
          }
          case 78:
            break;
          case 10: {
            return LP;
          }
          case 79:
            break;
          case 11: {
            return RP;
          }
          case 80:
            break;
          case 12: {
            return PARAM_ARGUMENT;
          }
          case 81:
            break;
          case 13: {
            return DS;
          }
          case 82:
            break;
          case 14: {
            return COLON;
          }
          case 83:
            break;
          case 15: {
            return RAW_LBR;
          }
          case 84:
            break;
          case 16: {
            return RAW_RBR;
          }
          case 85:
            break;
          case 17: {
            return COMMA;
          }
          case 86:
            break;
          case 18: {
            return LCURLY;
          }
          case 87:
            break;
          case 19: {
            return RCURLY;
          }
          case 88:
            break;
          case 20: {
            return EQ;
          }
          case 89:
            break;
          case 21: {
            return PIPE;
          }
          case 90:
            break;
          case 22: {
            return MM;
          }
          case 91:
            break;
          case 23: {
            return IN;
          }
          case 92:
            break;
          case 24: {
            return IF;
          }
          case 93:
            break;
          case 25: {
            return DEC_EXPONENT;
          }
          case 94:
            break;
          case 26: {
            return MULTI_LINE_COMMENT_END;
          }
          case 95:
            break;
          case 27: {
            return AMP_ARG;
          }
          case 96:
            break;
          case 28: {
            return STRING_DQ;
          }
          case 97:
            break;
          case 29: {
            return STRING_SQ;
          }
          case 98:
            break;
          case 30: {
            return PP;
          }
          case 99:
            break;
          case 31: {
            return MULTI_LINE_COMMENT_START;
          }
          case 100:
            break;
          case 32: {
            return DO;
          }
          case 101:
            break;
          case 33: {
            return PARAM_TOKEN;
          }
          case 102:
            break;
          case 34: {
            return OP_C;
          }
          case 103:
            break;
          case 35: {
            return TRY;
          }
          case 104:
            break;
          case 36: {
            return END;
          }
          case 105:
            break;
          case 37: {
            return FOR;
          }
          case 106:
            break;
          case 38: {
            return VAR;
          }
          case 107:
            break;
          case 39: {
            return TRAP;
          }
          case 108:
            break;
          case 40: {
            return ELSE;
          }
          case 109:
            break;
          case 41: {
            return EXIT;
          }
          case 110:
            break;
          case 42: {
            return OP_MR;
          }
          case 111:
            break;
          case 43: {
            return DATA;
          }
          case 112:
            break;
          case 44: {
            return FROM;
          }
          case 113:
            break;
          case 45: {
            return CATCH;
          }
          case 114:
            break;
          case 46: {
            return CLASS;
          }
          case 115:
            break;
          case 47: {
            return THROW;
          }
          case 116:
            break;
          case 48: {
            return PARAM;
          }
          case 117:
            break;
          case 49: {
            return EXPANDABLE_HERE_STRING;
          }
          case 118:
            break;
          case 50: {
            return VERBATIM_HERE_STRING;
          }
          case 119:
            break;
          case 51: {
            return BEGIN;
          }
          case 120:
            break;
          case 52: {
            return BREAK;
          }
          case 121:
            break;
          case 53: {
            return USING;
          }
          case 122:
            break;
          case 54: {
            return UNTIL;
          }
          case 123:
            break;
          case 55: {
            return WHILE;
          }
          case 124:
            break;
          case 56: {
            return SWITCH;
          }
          case 125:
            break;
          case 57: {
            return ELSEIF;
          }
          case 126:
            break;
          case 58: {
            return RETURN;
          }
          case 127:
            break;
          case 59: {
            return DEFINE;
          }
          case 128:
            break;
          case 60: {
            return FILTER;
          }
          case 129:
            break;
          case 61: {
            return PROCESS;
          }
          case 130:
            break;
          case 62: {
            return FOREACH;
          }
          case 131:
            break;
          case 63: {
            return FINALLY;
          }
          case 132:
            break;
          case 64: {
            return CONTINUE;
          }
          case 133:
            break;
          case 65: {
            return PARALLEL;
          }
          case 134:
            break;
          case 66: {
            return FUNCTION;
          }
          case 135:
            break;
          case 67: {
            return WORKFLOW;
          }
          case 136:
            break;
          case 68: {
            return INLINESCRIPT;
          }
          case 137:
            break;
          case 69: {
            return DYNAMICPARAM;
          }
          case 138:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
